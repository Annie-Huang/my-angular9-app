https://www.youtube.com/watch?v=TcdhAxDWWxM	<< Angular 9 - What's New? What changed?

https://next.angular.io/guide/template-typecheck
https://next.angular.io/guide/updating-to-version-9
https://update.angular.io/#8.2:9.0

https://www.npmjs.com/package/@angular/cli

=========================================================
Overview point:
1. You don't actually need to need to adjust anything if you don't want to. That is optional syntax change like removing { static: false } from @ViewChild('xxxxx', { static: false })
   But it's all right if you don't want to do it.
2. Polyfill.ts has not changed.
3. .editorconfig has not change
4. angular has not plan to move to eslint yet.


root/tsconfig.json
  "angularCompilerOptions": {
    "fullTemplateTypeCheck": true,
    "strictInjectionParameters": true
    "strictTemplates": true
  }


  @ViewChild('fromAccount', { static: false })
  fromAccount: FormControlDirective;
Can be change to:
  @ViewChild('fromAccount')
  fromAccount: FormControlDirective;
You don't have to have changed it. But it just make it cleanly. It's optional


And if you need to access priceElement inthe ngOnInit, you have to set static: true (You already have to do this in angular 8):
@ViewChild('price', {static: true}) priceElement: ElementRef<HTMLInputElement>
ngOnInit() {
  console.log(this.priceElement); // {static: true} required if we want to work with...
}


Compare C:\Temp\my-angular9-app (test-create-library branch) with C:\Temp\my-angular8dot2-app (test-create-library branch): Both CSS base, no routing.
==============================================================================================================================================================
C:\Temp\my-angular9-app\e2e\src\app.po.ts

C:\Temp\my-angular9-app\projects\ea-ui\src\test.ts
C:\Temp\my-angular9-app\projects\ea-ui\package.json
C:\Temp\my-angular9-app\projects\ea-ui\tsconfig.lib.json
C:\Temp\my-angular9-app\projects\ea-ui\tsconfig.lib.prod.json	<< new file

C:\Temp\my-angular9-app\src\app\app.component.spec.ts	>> fixture.debugElement.componentInstance; --> fixture.componentInstance;
C:\Temp\my-angular9-app\src\test.ts


C:\Temp\my-angular9-app\angular.json
C:\Temp\my-angular9-app\package.json
C:\Temp\my-angular9-app\tsconfig.app.json
C:\Temp\my-angular9-app\tsconfig.json


Compare C:\Temp\my-angular9-scss-route-app (create-lib branch) with C:\Temp\my-angular8-app (create-lib branch): Both SCSS base, plus routing.
==============================================================================================================================================================
C:\Temp\my-angular9-scss-route-app\e2e\src\app.po.ts
C:\Temp\my-angular9-scss-route-app\e2e\protractor.conf.js

C:\Temp\my-angular9-scss-route-app\projects\ea-ui\src\lib\ea-ui.component.ts
C:\Temp\my-angular9-scss-route-app\projects\ea-ui\src\test.ts
C:\Temp\my-angular9-scss-route-app\projects\ea-ui\package.json
C:\Temp\my-angular9-scss-route-app\projects\ea-ui\tsconfig.lib.json
C:\Temp\my-angular9-scss-route-app\projects\ea-ui\tsconfig.lib.prod.json	<< new file

C:\Temp\my-angular9-scss-route-app\src\app\app.component.spec.ts	>> fixture.debugElement.componentInstance; --> fixture.componentInstance;
C:\Temp\my-angular9-scss-route-app\src\test.ts

C:\Temp\my-angular9-scss-route-app\angular.json
C:\Temp\my-angular9-scss-route-app\package.json
C:\Temp\my-angular9-scss-route-app\tsconfig.app.json
C:\Temp\my-angular9-scss-route-app\tsconfig.json

eslint vs tslint:
==================
eslint has the following problem:
- Performance issues with eslint that make linting slower in large project
- eslint has large number of dependencies that you install during your npm install which is undesirable

ivy allows:
==============
- Rendering a single component without the need of ng module
- Significant improvement (40%) on the unit test execution with the new testbed.


Done:
==========
3. Sprint up a angular 9 project with angular cli, create a ea-ui library. And then root file directory comparision and mark down the different files and their content.

Sort of Done:
===================
5. Compared the tslint.json difference between standard angular cli build (my-anyand lodgement ui	<<< Heaps of differences....
6. Compared the tslint.json difference between standard standard nx build (myorg) and lodgement ui	<<< Not many differences.... good news...


ToDo:
=========
0. Find out the script to how to build and zip each app and lib
1. Check the artifact size for each app + each library in angular 8
2. Check the artiface size for each app + each library in angular 9
4. Need to compare lodgement-ui and myorg to see the different between nx angular app configuration.


Updating Angular CLI
npm uninstall -g angular-cli
npm uninstall --save-dev angular-cli

Global package:
npm uninstall -g @angular/cli
npm cache verify
# if npm version is < 5 then use `npm cache clean`
npm install -g @angular/cli@latest

Local project package:
rm -rf node_modules dist # use rmdir /S/Q node_modules dist in Windows Command Prompt; use rm -r -fo node_modules,dist in Windows PowerShell
npm install --save-dev @angular/cli@latest
npm install

###############################################################
Upgrade angular 9.0.0 to angular 9.1.1

Annie@DESKTOP-BH46C1T MINGW64 /c/temp
$ ng new my-angular9dot1-app --routing=true --style=scss

Annie@DESKTOP-BH46C1T MINGW64 /c/temp/my-angular9dot1-app (master)
$ ng generate library ea-ui --prefix=eui


C:\Temp\my-angular9-app>ng update @angular/core @angular/cli      <<< This upgraded all the angular library, not just these two...

C:\Temp\my-angular9-app>npm uninstall karma
C:\Temp\my-angular9-app>npm install karma --save-dev
